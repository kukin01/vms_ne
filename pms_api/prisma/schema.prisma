generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN // The application admin
  USER // This is a compuser

  @@map("roles")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED

  @@map("verification_status")
}

enum PasswordResetStatus {
  PENDING
  IDLE

  @@map("password_reset_status")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("request_status")
}

enum VehicleStatus {
  PENDING
  APPROVED

  @@map("vehicle_status")
}

model User {
  id                   String              @id @default(uuid())
  names                String
  email                String              @unique
  telephone            String?             @unique
  password             String
  profilePicture       String              @default("https://firebasestorage.googleapis.com/v0/b/relaxia-services.appspot.com/o/relaxia-profiles%2Fblank-profile-picture-973460_960_720.webp?alt=media") @map("profile_picture")
  role                 Role                @default(USER)
  verificationStatus   VerificationStatus  @default(UNVERIFIED) @map("verification_status")
  verificationCode     String?             @map("verification_code")
  verificationExpires  DateTime?           @map("verification_expires")
  passwordResetStatus  PasswordResetStatus @default(IDLE) @map("password_reset_status")
  passwordResetCode    String?             @map("password_reset_code")
  passwordResetExpires DateTime?           @map("password_reset_expires")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  vehicleRequests ParkingRequest[]
  Entry_car       Entry_car[]
  Exit_car        Exit_car[]

  @@map("users")
}

model Entry_car {
  id              String           @id @default(uuid())
  plateNumber     String           @unique @map("plate_number")
  parking_code    String           @map("code")
  parking_lot     ParkingSlot      @relation(fields: [parking_code], references: [id])
  status          VehicleStatus    @default(PENDING)
  userId          String           @map("user_id")
  user            User             @relation(fields: [userId], references: [id])
  entry_time      DateTime         @default(now()) @map("entry_time")
  exit_time       DateTime         @default(now()) @map("exit_time")
  charged_amount  Int              @default(0) @map("charged_amount")
  vehicleRequests ParkingRequest[]

  @@map("entry_cars")
}

model Exit_car {
  id             String           @id @default(uuid())
  plateNumber    String           @unique @map("plate_number")
  parking_code   String           @map("code")
  parking_lot    ParkingSlot      @relation(fields: [parking_code], references: [id])
  status         VehicleStatus    @default(PENDING)
  userId         String           @map("user_id")
  user           User             @relation(fields: [userId], references: [id])
  entry_time     DateTime         @default(now()) @map("entry_time")
  exit_time      DateTime         @updatedAt @map("exit_time")
  charged_amount Int              @map("charged_amount")
  ParkingRequest ParkingRequest[]

  @@map("exit_cars")
}

model ParkingSlot {
  id                    String   @id @default(uuid())
  code                  String   @unique @map("code")
  parking_name          String   @unique @map("parking_name")
  slotNumber            Int      @unique @map("slot_number")
  location              String   @map("location")
  isAvailable           Boolean  @default(true) @map("is_available")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  charging_fee_per_hour Int      @unique @map("charging_fee_per_hour")
  available_space       Int      @map("spaces")

  parkingRequests ParkingRequest[]
  entry_cars      Entry_car[]
  exit_cars       Exit_car[]

  @@map("parking_slots")
}

model ParkingRequest {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  carId         String        @map("car_id")
  parkingSlotId String        @map("parking_slot_id")
  checkIn       DateTime      @default(now()) @map("check_in")
  checkOut      DateTime      @default(now()) @map("check_out")
  status        RequestStatus @default(PENDING)
  requestedAt   DateTime      @default(now()) @map("requested_at")
  approvedAt    DateTime?     @map("approved_at")
  user          User          @relation(fields: [userId], references: [id])
  Entry_car     Entry_car     @relation(fields: [carId], references: [id])
  parkingSlot   ParkingSlot   @relation(fields: [parkingSlotId], references: [id])
  Exit_car      Exit_car?     @relation(fields: [exit_carId], references: [id])
  exit_carId    String?

  @@map("parking_requests")
}
